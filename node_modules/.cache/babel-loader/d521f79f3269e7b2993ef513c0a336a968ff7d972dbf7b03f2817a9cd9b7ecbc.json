{"ast":null,"code":"var _jsxFileName = \"D:\\\\General\\\\chat-karo-main\\\\src\\\\component\\\\Search.jsx\",\n  _s = $RefreshSig$();\nimport { collection, query, where, getDocs, getDoc, setDoc, doc, updateDoc, serverTimestamp } from \"firebase/firestore\";\nimport React from 'react';\nimport { useContext } from \"react\";\nimport { useState } from 'react';\nimport { db } from '../firebase';\nimport { AuthContext } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = () => {\n  _s();\n  const [username, setUsername] = useState(\"\"); //This is useState for the Input user and if the user present  we want to show that hence we need below\n  const [user, setUser] = useState(null); //This is for the user present to show the user \n  const [err, setErr] = useState(false);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  console.log(currentUser);\n\n  /* Handled by Firebase Query \n  function for Search any user */\n  const handleSearch = async () => {\n    const q = query(collection(db, \"users\"), where(\"displayName\", \"==\", username)); //Collecting data in users collection if displayName is equal to user \n\n    try {\n      const querySnapshot = await getDocs(q);\n      querySnapshot.forEach(doc => {\n        setUser(doc.data());\n      });\n    } catch (error) {\n      setErr(true);\n    }\n  };\n  const handleKey = event => {\n    event.code === \"Enter\" && handleSearch(); //When event is equal to Enter then we just search for the user\n  };\n\n  const handleSelect = async () => {\n    //check wether the group(chats in firestore) exists, if not create \n    const combinedId = currentUser.uid > user.uid ? currentUser.uid + user.uid : user.uid + currentUser.uid;\n    try {\n      //if the chat between the user is exist \n      //we store in the response constant\n\n      const res = await getDoc(doc(db, \"chats\", combinedId));\n      console.log(res);\n      /*If the Response that is chat between the user is not exsit we create the Chats  */\n      if (!res.exists()) {\n        //creating chat in chats collection \n        console.log(res);\n        await setDoc(doc(db, \"chats\", combinedId), {\n          messages: []\n        });\n        //create user Chats\n\n        /* while Creating user Chats in search bar what we need is \n           *both userID(id)\n           *last message {we want to show at bottom of every user}\n           *displayName (dn)\n           *img \n           *date {we are going to sort the date in this file }\n        */\n\n        /*   usersChat:{\n              joyeId :{              \n                combinedId :{\n                      userInfo{\n                         dn,img,id \n                      },\n                      lastMessage:\"\"       //rightnow we dont have any chat \n                      date:               //it is current date\n                }\n              }\n           } */\n\n        await updateDoc(doc(db, \"usersChat\", currentUser.uid), {\n          [combinedId + \".userInfo\"]: {\n            uid: user.uid,\n            displayName: user.displayName,\n            photoURL: user.photoURL\n          },\n          [combinedId + \".date\"]: serverTimestamp() //serverTimeStamp is  function of firebase it calculated time according  to different time zone \n\n          /* RightNow we are not intialising the bottom msg of the user\n             Because right now we dont have any current user \n              we are updating it when we Send msg to friend\n          */\n        });\n\n        /* We are doing same thing for the other side of  user  */\n\n        await updateDoc(doc(db, \"usersChat\", user.uid), {\n          [combinedId + \".userInfo\"]: {\n            uid: currentUser.uid,\n            displayName: currentUser.displayName,\n            photoURL: currentUser.photoURL\n          },\n          [combinedId + \".date\"]: serverTimestamp() //serverTimeStamp is  function of firebase it calculated time according  to different time zone \n\n          /* RightNow we are not intialising the bottom msg of the user\n             Because right now we dont have any current user \n              we are updating it when we Send msg to friend\n          */\n        });\n      }\n    } catch (err) {}\n    setUser(null);\n    setUsername(\"\");\n\n    //create user chats\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"searchForm\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Find a user\",\n        onKeyDown: handleKey,\n        onChange: event => setUsername(event.target.value),\n        value: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), err && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" User Not Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 16\n    }, this), user && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userChat\",\n      onClick: handleSelect,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: user.photoURL,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userChatInfo\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: user.displayName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"EdX6JSRygHy5Z8U5Lp5lNvSyKnE=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["collection","query","where","getDocs","getDoc","setDoc","doc","updateDoc","serverTimestamp","React","useContext","useState","db","AuthContext","jsxDEV","_jsxDEV","Search","_s","username","setUsername","user","setUser","err","setErr","currentUser","console","log","handleSearch","q","querySnapshot","forEach","data","error","handleKey","event","code","handleSelect","combinedId","uid","res","exists","messages","displayName","photoURL","className","children","type","placeholder","onKeyDown","onChange","target","value","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/General/chat-karo-main/src/component/Search.jsx"],"sourcesContent":["\nimport { collection, query, where,getDocs, getDoc, setDoc ,doc, updateDoc, serverTimestamp} from \"firebase/firestore\";\nimport React from 'react'\nimport { useContext } from \"react\";\nimport { useState } from 'react'\nimport {db} from '../firebase'\nimport { AuthContext } from '../context/AuthContext';\n\n\nconst Search = () => {\n\n  const [username,setUsername] = useState(\"\");  //This is useState for the Input user and if the user present  we want to show that hence we need below\n  const [user, setUser] = useState(null) ;        //This is for the user present to show the user \n  const [err, setErr] = useState(false);  \n  \n  \n  const {currentUser} = useContext(AuthContext);\n  console.log(currentUser);\n\n   \n  /* Handled by Firebase Query \n  function for Search any user */\n  const handleSearch = async () =>{       \n    \n      const q = query(\n        collection(db,\"users\"),\n        where(\"displayName\", \"==\",username)\n        ); //Collecting data in users collection if displayName is equal to user \n      \n      \n      try{\n         \n     const querySnapshot = await getDocs(q);\n     querySnapshot.forEach((doc) => {\n       setUser(doc.data())\n    });\n\n      }catch(error){\n            setErr(true)\n      }\n        \n\n  };\n\n  const handleKey = (event) =>{\n    event.code ===\"Enter\" && handleSearch();  //When event is equal to Enter then we just search for the user\n  };\n\n\n  const handleSelect = async () =>\n  {\n     //check wether the group(chats in firestore) exists, if not create \n       const combinedId  = \n       currentUser.uid > user.uid \n       ? currentUser.uid + user.uid \n        : user.uid + currentUser.uid;\n    \n        \n        \n       try{\n        //if the chat between the user is exist \n         //we store in the response constant\n    \n           \n         const res = await getDoc(doc(db,\"chats\",combinedId));\n         console.log(res)\n        /*If the Response that is chat between the user is not exsit we create the Chats  */\n         if(!res.exists()){\n           \n            //creating chat in chats collection \n             console.log(res)\n            \n            await setDoc(doc(db,\"chats\",combinedId), {messages :[] });\n            //create user Chats\n\n            /* while Creating user Chats in search bar what we need is \n               *both userID(id)\n               *last message {we want to show at bottom of every user}\n               *displayName (dn)\n               *img \n               *date {we are going to sort the date in this file }\n            */\n             \n         /*   usersChat:{\n               joyeId :{              \n                 combinedId :{\n                       userInfo{\n                          dn,img,id \n                       },\n                       lastMessage:\"\"       //rightnow we dont have any chat \n                       date:               //it is current date\n                 }\n               }\n            } */ \n            \n            await updateDoc(doc(db,\"usersChat\",currentUser.uid),{\n                 [combinedId + \".userInfo\"] :{\n                    \n                    uid : user.uid,\n                    displayName : user.displayName,\n                    photoURL : user.photoURL,\n\n                 },\n\n                 [combinedId + \".date\"] : serverTimestamp() ,   //serverTimeStamp is  function of firebase it calculated time according  to different time zone \n\n                /* RightNow we are not intialising the bottom msg of the user\n                   Because right now we dont have any current user \n\n                   we are updating it when we Send msg to friend\n                */  \n\n            });\n\n            /* We are doing same thing for the other side of  user  */\n             \n            await updateDoc(doc(db,\"usersChat\",user.uid),{\n              [combinedId + \".userInfo\"] :{\n                 \n                 uid : currentUser.uid,\n                 displayName : currentUser.displayName,\n                 photoURL : currentUser.photoURL\n\n              },\n\n              [combinedId + \".date\"] : serverTimestamp() ,   //serverTimeStamp is  function of firebase it calculated time according  to different time zone \n\n             /* RightNow we are not intialising the bottom msg of the user\n                Because right now we dont have any current user \n\n                we are updating it when we Send msg to friend\n             */  \n\n         });\n\n\n         }\n       }\n       catch(err){}\n      \n    setUser(null);\n    setUsername(\"\");\n       \n     //create user chats\n  };\n\n  return (\n    <div className='search'>\n      <div className=\"searchForm\">\n        <input type=\"text\" placeholder='Find a user' onKeyDown={handleKey} onChange={(event)=>setUsername(event.target.value)} value = {username} /> \n       </div>\n       {err && <span> User Not Found</span> }\n      {user && <div className=\"userChat\" onClick={handleSelect} > \n        <img src={user.photoURL} alt=\"\" />\n        <div className=\"userChatInfo\">\n             <span>{user.displayName}</span>\n        </div>\n       </div>}\n    </div>\n    \n  );\n};\n\nexport default Search;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}