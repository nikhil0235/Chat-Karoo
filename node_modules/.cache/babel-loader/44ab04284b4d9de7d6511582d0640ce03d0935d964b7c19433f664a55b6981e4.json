{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NIKHIL RAJPUT\\\\Desktop\\\\Mern chat app\\\\chat-karo-main\\\\src\\\\component\\\\Input.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport attach from \"../img/attach.png\";\nimport addfile from \"../img/addfile.png\";\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { arrayUnion, doc, serverTimestamp, Timestamp, updateDoc } from 'firebase/firestore';\nimport { db /*storage*/ } from '../firebase';\nimport { v4 as uuid } from \"uuid\";\n//import { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Input = () => {\n  _s();\n  /* We are writing two UseState one is for Text and another is for Image  */\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n\n  /* we need currentUser*/\n  const {\n    currentUser\n  } = useContext(AuthContext);\n\n  //ChatContext is because we are going to need another user \n  const {\n    data\n  } = useContext(ChatContext);\n  const handleSend = async () => {\n    /* Checking if img present or text then we send according to it  */\n\n    if (img) {\n      console.log(\"This is not working right now \");\n      /*  const storageRef = ref(storage, uuid() );\n         const uploadTask = uploadBytesResumable(storageRef, img);\n        \n      \n         uploadTask.on(\n          (error) =>{\n           },\n           () =>{\n                getDownloadURL(uploadTask.snapshot.ref).then(async(downloadURL)=>{\n                  await updateDoc(doc(db,\"chats\",data.chatId),{\n                      \n                    messages :arrayUnion({\n                        id :uuid(),\n                        text,\n                        senderId :currentUser.uid,\n                        data : Timestamp.now(),\n                        img :downloadURL,\n                    }),\n                     \n                  });\n                 \n             });\n                 \n               \n          }\n           );\n       */\n    } else {\n      /*using fireBaseFunction arrayUnion to update the Array */\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n          /*Not using server TimeStamp instead we are using normal TimeStamp */\n        })\n      });\n    }\n\n    //We are updating last message and date in users chat which is show in search bar \n    //We need to sort the date hence we see new msg first\n\n    await updateDoc(doc(db, \"usersChat\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n\n    /*why two because it for both the users  */\n    await updateDoc(doc(db, \"usersChat\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\"); /*After sending the text and the image we going to delete it  */\n    setImg(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type Something.......\",\n      onChange: event => setText(event.target.value),\n      value: text\n      /*after sending we are removing send text with text normal */\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: attach,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: \"none\"\n        },\n        id: \"file\",\n        onChange: event => setImg(event.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: addfile,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Input, \"q//4GW5ClIVGNoMS/xADfe+Jtn4=\");\n_c = Input;\nexport default Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","useContext","useState","attach","addfile","AuthContext","ChatContext","arrayUnion","doc","serverTimestamp","Timestamp","updateDoc","db","v4","uuid","jsxDEV","_jsxDEV","Input","_s","text","setText","img","setImg","currentUser","data","handleSend","console","log","chatId","messages","id","senderId","uid","date","now","user","className","children","type","placeholder","onChange","event","target","value","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","style","display","files","htmlFor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/NIKHIL RAJPUT/Desktop/Mern chat app/chat-karo-main/src/component/Input.jsx"],"sourcesContent":["import React, { useContext, useState } from 'react'\nimport attach from \"../img/attach.png\"\nimport addfile from \"../img/addfile.png\"\nimport { AuthContext } from '../context/AuthContext'\nimport { ChatContext } from '../context/ChatContext'\nimport { arrayUnion, doc, serverTimestamp, Timestamp, updateDoc } from 'firebase/firestore'\nimport { db, /*storage*/ } from '../firebase'\nimport{v4 as uuid} from \"uuid\"\n//import { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\n\n\nconst Input = () => {\n\n\n  /* We are writing two UseState one is for Text and another is for Image  */\n \n    const [text,setText] = useState(\"\");\n    const[img,setImg] = useState(null);\n \n  /* we need currentUser*/\n  const {currentUser}  = useContext(AuthContext)\n\n  //ChatContext is because we are going to need another user \n  const {data}  = useContext(ChatContext)\n\n  \n  const handleSend = async () =>{\n      \n/* Checking if img present or text then we send according to it  */\n\n      if(img){  \n             \n          console.log(\"This is not working right now \")\n      /*  const storageRef = ref(storage, uuid() );\n\n        const uploadTask = uploadBytesResumable(storageRef, img);\n        \n      \n\n        uploadTask.on(\n          (error) =>{\n\n          },\n\n          () =>{\n                getDownloadURL(uploadTask.snapshot.ref).then(async(downloadURL)=>{\n                  await updateDoc(doc(db,\"chats\",data.chatId),{\n                      \n                    messages :arrayUnion({\n                        id :uuid(),\n                        text,\n                        senderId :currentUser.uid,\n                        data : Timestamp.now(),\n                        img :downloadURL,\n                    }),\n                     \n                  });\n                 \n             });\n                 \n               \n          }\n\n\n\n        );\n       */ \n\n      }else{\n           \n        /*using fireBaseFunction arrayUnion to update the Array */\n        await updateDoc(doc(db,\"chats\",data.chatId),\n        {\n              messages : arrayUnion({\n                   \n                 id :uuid(),\n                 text,\n                 senderId:currentUser.uid,\n                 date:Timestamp.now(),\n                 /*Not using server TimeStamp instead we are using normal TimeStamp */\n              })\n        });\n      }\n\n  //We are updating last message and date in users chat which is show in search bar \n  //We need to sort the date hence we see new msg first\n\n      await updateDoc(doc(db,\"usersChat\",currentUser.uid),{\n         [data.chatId + \".lastMessage\"]:{\n            text,\n         },\n\n         [data.chatId+ \".date\"]: serverTimestamp(),\n      });\n\n      /*why two because it for both the users  */\n      await updateDoc(doc(db,\"usersChat\",data.user.uid),{\n        [data.chatId + \".lastMessage\"]:{\n           text,\n        },\n\n        [data.chatId+ \".date\"]: serverTimestamp(),\n     });\n      setText(\"\") /*After sending the text and the image we going to delete it  */\n      setImg(null)\n  };\n\n\n  return (\n    <div className='input'>\n      <input\n       type=\"text\" \n       placeholder='Type Something.......' \n       onChange={event=>setText(event.target.value)}\n\n       value ={text}\n       /*after sending we are removing send text with text normal */\n       /> {/*on Change is basically changing current state of the input */}\n      <div className=\"send\">\n      \n        <img src={attach} alt=\"\" />\n        <input type=\"file\" style ={{display:\"none\"}} id  =\"file\" onChange={event=>setImg(event.target.files[0])}    />\n        <label htmlFor=\"file\">\n          <img src={addfile} alt=\"\" />\n        </label>\n        <button onClick={handleSend} >Send</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Input"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}